import{r as s,o,c as r,a as e,e as i,F as a,b as t}from"./app.f04538c2.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const c={},d=e("h1",{id:"_3-3-xss-defense-best-practices",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-3-xss-defense-best-practices","aria-hidden":"true"},"#"),t(" 3.3 XSS Defense Best Practices")],-1),u=e("h2",{id:"what-can-i-do-to-prevent-xss",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-can-i-do-to-prevent-xss","aria-hidden":"true"},"#"),t(" What can I do to prevent XSS ?")],-1),h=e("li",null,[t("Use "),e("strong",null,"frameworks"),t(" that natively escape XSS "),e("strong",null,"by design"),t(".")],-1),_=e("li",null,[e("strong",null,"Sanitize all users inputs"),t(". Sanitization is the inspection of an untrusted value, turning it into a value that is safe to use in the DOM.")],-1),p=t("Apply "),f={href:"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#xss-prevention-rules",target:"_blank",rel:"noopener noreferrer"},S=t("OWASP XSS prevention rules"),g=e("li",null,[t("Use SAST in your IDE in order to alert on vulnerable code "),e("strong",null,"while you are developing"),t(".")],-1),m=e("li",null,[t("Request "),e("strong",null,"code reviews"),t(" from acknowledged Security Reviewers in your team.")],-1),v=e("li",null,[e("strong",null,"Scan your code"),t(" with automated code analysis tools in your merge requests and prevent pushing any vulnerable code in your application.")],-1),x=e("li",null,"Perform regular SCA scans of your dependencies with Dependency Track and fix the vulnerabilities raised.",-1),w=e("li",null,"Perform regular penetration testing with DAST tools like OWASP ZAP and fix the findings.",-1),y=e("p",null,"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)",-1);function b(k,A){const n=s("ExternalLinkIcon");return o(),r(a,null,[d,u,e("ul",null,[h,_,e("li",null,[p,e("a",f,[S,i(n)])]),g,m,v,x,w]),y],64)}var C=l(c,[["render",b]]);export{C as default};
