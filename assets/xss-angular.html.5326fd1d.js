import{r as a,o as e,c as t,a as s,e as r,F as o,d as i,b as p}from"./app.f04538c2.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";var l="/angular-security-training/assets/xss-contextual-escaping.0299c4ee.png",u="/angular-security-training/assets/xss-input-sanitazation.1c245067.png";const d={},g=i('<h1 id="_3-4-xss-protection-in-angular" tabindex="-1"><a class="header-anchor" href="#_3-4-xss-protection-in-angular" aria-hidden="true">#</a> 3.4 XSS Protection in Angular</h1><h2 id="what-are-the-xss-defense-mechanisms-available-in-angular" tabindex="-1"><a class="header-anchor" href="#what-are-the-xss-defense-mechanisms-available-in-angular" aria-hidden="true">#</a> What are the XSS defense mechanisms available in Angular ?</h2><h3 id="angular-built-in-defense" tabindex="-1"><a class="header-anchor" href="#angular-built-in-defense" aria-hidden="true">#</a> Angular Built in defense</h3><p>The good news is that Angular treats all <strong>users inputs as untrusted data</strong> by default.</p><p>Therefore, it has an XSS defense <strong>by default</strong>.</p><h3 id="contextual-escaping" tabindex="-1"><a class="header-anchor" href="#contextual-escaping" aria-hidden="true">#</a> Contextual escaping</h3><p><img src="'+l+'" alt="xss-contextual-escaping"></p><p>Angular displays any input (malicious or not) as <strong>plain text</strong> on your webpage.</p><p>It <strong>won&#39;t interpret the input</strong> as HTML (for example in comments) <strong>if you don&#39;t explicitly tell him to</strong>.</p><h3 id="input-sanitization" tabindex="-1"><a class="header-anchor" href="#input-sanitization" aria-hidden="true">#</a> Input Sanitization</h3><p><img src="'+u+`" alt="xss-contextual-escaping"></p><p>Use angular properties to bind user inputs:</p><ul><li><code>[innerHtml]</code>: binds html tags</li><li><code>[style]</code>: binds CSS attributes</li><li><code>[href]</code>: binds dynamic links</li></ul><p>Angular <strong>will interpret</strong> the bound inputs if <strong>you explicitly use the corresponding property</strong>.</p><p>Angular automatically recognizes <code>&lt;script&gt;</code> tags as <strong>unsafe</strong> and removes it. A <strong>warning</strong> appears in the browser console to notify you if Angular has sanitized an input value.</p><h3 id="input-sanitization-bypassing" tabindex="-1"><a class="header-anchor" href="#input-sanitization-bypassing" aria-hidden="true">#</a> Input Sanitization Bypassing</h3><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>\u26A0\uFE0F Use with care \u26A0\uFE0F</p></div><p>Sometimes application need to <strong>include executable code</strong>, display an <strong>iframe</strong> from an url or construct potentially <strong>dangerous urls</strong>...</p><p>\u26A0\uFE0F You must discuss this use case with your Security Officer before going further. \u26A0\uFE0F</p><p>If you really need to use validated user input in your application, you must <strong>mark it as trusted input</strong>.</p><p>You can use the byPassSecurityTrust...() functions from the DomSanitizer class:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DomSanitizer</span> <span class="token keyword">implements</span> <span class="token class-name">Sanitizer</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">sanitize</span><span class="token punctuation">(</span>context<span class="token operator">:</span> SecurityContext<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SafeValue<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token keyword">abstract</span> <span class="token function">bypassSecurityTrustHtml</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SafeHtml
  <span class="token keyword">abstract</span> <span class="token function">bypassSecurityTrustStyle</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SafeStyle
  <span class="token keyword">abstract</span> <span class="token function">bypassSecurityTrustScript</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SafeScript
  <span class="token keyword">abstract</span> <span class="token function">bypassSecurityTrustUrl</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SafeUrl
  <span class="token keyword">abstract</span> <span class="token function">bypassSecurityTrustResourceUrl</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SafeResourceUrl
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="further-resources" tabindex="-1"><a class="header-anchor" href="#further-resources" aria-hidden="true">#</a> Further resources</h2>`,23),h={href:"https://angular.io/guide/security#server-side-xss-protection",target:"_blank",rel:"noopener noreferrer"},k=p("angular.io/guide/security#server-side-xss-protection");function b(m,y){const n=a("ExternalLinkIcon");return e(),t(o,null,[g,s("p",null,[s("a",h,[k,r(n)])])],64)}var S=c(d,[["render",b]]);export{S as default};
