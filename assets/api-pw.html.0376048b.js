import{d as e}from"./app.f04538c2.js";import{_ as t}from"./pw-coding.b255a857.js";import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";const n={},s=e('<h1 id="_7-3-unprotected-api-practical-work" tabindex="-1"><a class="header-anchor" href="#_7-3-unprotected-api-practical-work" aria-hidden="true">#</a> 7.3 Unprotected API Practical Work</h1><p><img src="'+t+`" alt="pw"></p><h2 id="part-1" tabindex="-1"><a class="header-anchor" href="#part-1" aria-hidden="true">#</a> Part 1</h2><p>For this PW, we need to have an authentication process. So, we recommend implementing/use the JWT authentication before starting. You can get the JWT OAuth implementation from the previous PW-JWT-OAuth : <code>git clone -b PW-JWT-OAuth TO_DO /secure-angular-training-app.git</code></p><p>1 - Protect your API - Add server-side protection for the following actions :</p><ul><li>Unauthenticated users have access to the news API (/api/news/**)</li><li>Only &quot;Admin&quot; profile can delete a news (authenticated user with <code>ROLE_ADMIN</code> role)</li><li>Only &quot;User&quot; profile can add news (authenticated user with <code>ROLE_USER</code> role)</li><li>Any authenticated user can &quot;like&quot; news</li></ul><p>Hints :</p><ul><li>use spring security annotation <code>org.springframework.security.access.annotation.Secured</code> to protect your REST endpoints</li><li>Check existing roles in <code>/bookstore/src/main/resources/config/liquibase/authorities.csv</code> file</li><li>for a global setting, use the <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code> in <code>SecurityConfiguration#configure</code> method</li><li>More details on spring security api : <code>https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-method</code></li></ul><p>2 - Protect the GUI - Adapt client-side according to server-side protection:</p><ul><li>Unauthenticated users have access to the news API (/api/news/**)</li><li>Only &quot;Admin&quot; profile can delete a news (authenticated user with <code>ROLE_ADMIN</code> role)</li><li>Only &quot;User&quot; profile can add news (authenticated user with <code>ROLE_USER</code> role)</li><li>Any authenticated user can &quot;like&quot; news</li></ul><p>Hints :</p><ul><li>in <code>src/app/services/auth/principal.service.ts</code>, declare implement functions <code>isAdmin</code> and <code>isUser</code> (check roles from authorities list of &quot;this._identity&quot; attribute)</li><li>in home.html, use <code>ngIf</code> directive and previous functions to hide portions of template</li><li>declare <code>principal</code> service in constructor as public in home.ts to make it accessible from home.html</li><li>don&#39;t forget to <code>ng build</code> the frontend (and &#39;mvn&#39; the backend) after any modification (no live reloading for this PW)</li></ul><h2 id="part-2" tabindex="-1"><a class="header-anchor" href="#part-2" aria-hidden="true">#</a> Part 2</h2><p>Configure CORS</p><p>1 - Protect your API against other domains:</p><p>CORS is effective only in case of cross-origin requests, to simulate a cross-origin request:</p><ul><li>Modify app/src/services/newsService.ts, in <code>getNews()</code> function, update the existing request <code>api/news</code><ul><li>Use an absolute url with the port 8080</li><li>Explicit the <code>Content-Type</code> header for the request</li><li>Stop using a proxy (<code>ng serve --proxy-config proxy.conf.json</code>) if any and launch <code>ng build</code> command to update the <code>dist</code> repo (needed for the next steps)</li></ul></li></ul><p>Hint : to set a header for a request, use a Headers object and pass it as a second param of the http#get method</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>_url_<span class="token punctuation">,</span> <span class="token punctuation">{</span>headers<span class="token operator">:</span> headers<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>Launch a second server in a different port : <code>mvn -Drun.arguments=&quot;--server.port=9000&quot;</code> and access to corresponding home page <code>http://localhost:9000/#/home</code></p></li><li><p>What&#39;s the result ? Why ? Observe the client console.</p></li></ul><p>Hint : Read about Single Origin Policy(SOP)</p><p>2 - Allow cross-origin requests</p><ul><li><p>Configure CORS in order to allow cross-origin request from localhost only (choose the right port)</p></li><li><p>Observe the network traffic - Look for CORS headers for the <code>api/news</code> request/response</p></li></ul><p>Hint :</p><ul><li><p>To enable CORS, see bookstore/src/main/resources/config/application.yml</p></li><li><p>To authorize an HTTP method for an API, use <code>HttpSecurity#authorizeRequests().antMatchers(HttpMethod.OPTIONS, &quot;/**&quot;).permitAll() </code></p></li></ul>`,25);function a(i,r){return s}var d=o(n,[["render",a]]);export{d as default};
