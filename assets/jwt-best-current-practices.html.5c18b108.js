import{r as i,o as r,c as o,a as e,e as n,F as s,d as c,b as a}from"./app.f04538c2.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const h={},d=c('<h1 id="_1-5-jwt-best-current-practices" tabindex="-1"><a class="header-anchor" href="#_1-5-jwt-best-current-practices" aria-hidden="true">#</a> 1.5 JWT Best Current Practices</h1><p>The <strong>minimum recommendations</strong> to defend your JWT against the threats mentioned previously are :</p><h2 id="perform-algorithm-verification" tabindex="-1"><a class="header-anchor" href="#perform-algorithm-verification" aria-hidden="true">#</a> Perform Algorithm Verification</h2><ul><li>Enable the caller to specify a supported set of algorithms and do not use any other algorithms when performing cryptographic operations.</li><li>Ensure that the <code>alg</code> or <code>enc</code> header specifies the same algorithm that is used for the cryptographic operation.</li><li>Each key must be used exactly by one algorithm only.</li><li>Check the key each time the cryptographic operation is performed.</li></ul><h2 id="use-appropriate-algorithms" tabindex="-1"><a class="header-anchor" href="#use-appropriate-algorithms" aria-hidden="true">#</a> Use Appropriate Algorithms</h2><ul><li>Consider the JWS as invalid if the algorithm is not accepted by the application, even if the JWS can be successfully validated.</li><li>Only allow the use of cryptographically current algorithms that meet the security requirements of the application.</li><li>Design your application to enable cryptographic agility.</li><li>Do not generate or consume tokens using <code>none</code> unless explicitly requested by the caller.</li><li>Avoid all RSA-PKCS1 v1.5 encryption algorithm and prefer RSAES-OAEP.</li><li>Use the deterministic approach if you want to implement ECDSA.</li></ul><h2 id="validate-all-cryptographic-operations" tabindex="-1"><a class="header-anchor" href="#validate-all-cryptographic-operations" aria-hidden="true">#</a> Validate all cryptographic operations</h2><ul><li>Reject any cryptographic operation use in JWT if any validation step has failed.</li><li>Validate both outer and inner operations in nested JWT by using the keys and algorithms supplied by the application.</li></ul><h2 id="ensure-cryptographic-keys-have-sufficient-entropy" tabindex="-1"><a class="header-anchor" href="#ensure-cryptographic-keys-have-sufficient-entropy" aria-hidden="true">#</a> Ensure Cryptographic Keys have sufficient entropy</h2><ul><li>Human-memorizable passwords MUST NOT be directly used as the key to a keyed-MAC algorithm such as &quot;HS256&quot;.</li></ul><h2 id="use-utf-8" tabindex="-1"><a class="header-anchor" href="#use-utf-8" aria-hidden="true">#</a> Use UTF-8</h2><ul><li>Do not use or allow the use of other Unicode encodings for encoding and decoding JSON used in Header Parameters and JWT Claims.</li></ul><h2 id="validate-the-issuer-and-subject" tabindex="-1"><a class="header-anchor" href="#validate-the-issuer-and-subject" aria-hidden="true">#</a> Validate the Issuer and Subject</h2><ul><li>Reject the JWT if it does not contain the <code>iss</code> (issuer) claim.</li><li>Validate the cryptographic keys used for the cryptographic operations in the JWT belong to the issuer.</li><li>Validate that the <code>sub</code> (subject) value corresponds to a valid subject and/or issuer-subject pair at the application. Reject the JWT if the issuer, subject, or the pair are invalid.</li></ul><h2 id="use-and-validate-audience" tabindex="-1"><a class="header-anchor" href="#use-and-validate-audience" aria-hidden="true">#</a> Use and Validate Audience</h2><ul><li>JWT must contain an <code>aud</code> (audience) claim that can be used to determine whether the JWT is being used by an intended party or was substituted by an attacker at an unintended party.</li><li>Validate the audience value and reject the JWT if the audience value is not present or not associated with the recipient.</li></ul>',16),u=a("Source: "),p={href:"https://www.rfc-editor.org/rfc/rfc8725.html",target:"_blank",rel:"noopener noreferrer"},f=a("RFC-8725");function m(y,g){const t=i("ExternalLinkIcon");return r(),o(s,null,[d,e("p",null,[u,e("a",p,[f,n(t)])])],64)}var _=l(h,[["render",m]]);export{_ as default};
