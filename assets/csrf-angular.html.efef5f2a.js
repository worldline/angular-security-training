import{r as s,o,c as r,a as e,e as a,F as i,d as c,b as t}from"./app.f04538c2.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";var l="/angular-security-training/assets/cookie-to-header.3a500906.png";const u={},d=c('<h1 id="_2-4-csrf-protection-in-angular" tabindex="-1"><a class="header-anchor" href="#_2-4-csrf-protection-in-angular" aria-hidden="true">#</a> 2.4 CSRF Protection in Angular</h1><p>What are the defense mechanisms against CSRF available in Angular ?</p><h2 id="built-in-prevention" tabindex="-1"><a class="header-anchor" href="#built-in-prevention" aria-hidden="true">#</a> Built-in prevention</h2><p>Angular has a built-in CSRF prevention mechanism called cookie-to-header token. It is a mix of 2 protection patterns : &quot;Double submit cookie&quot; and &quot;Custom header&quot;</p><h2 id="cookie-to-header-workflow" tabindex="-1"><a class="header-anchor" href="#cookie-to-header-workflow" aria-hidden="true">#</a> cookie-to-header workflow</h2><ol><li>During authentication, the server sends a random CSRF token in a cookie <code>XSRF-TOKEN</code>.</li><li>Angular reads the token from the cookie <code>XSRF-TOKEN</code>.</li><li>Angular puts token in request header <code>X-XSRF-TOKEN</code>.</li><li>For each request, the browser sends the cookie <strong>and</strong> the request header.</li><li>Server extract and compares <strong>both</strong> tokens received from the client.</li><li>Server decides to verify the action only if the tokens match.</li></ol><p><img src="'+l+`" alt="cookie-to-header"></p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>CSRF prevention needs to be implemented in both your server (back-end) side, and your client (front-end) side.</p><p>As Angular provides solution as a client, you <strong>must investigate your back-end framework</strong> in order to generate and handle the random CSRF token.</p></div><h2 id="configuring-csrf-protection-in-angular" tabindex="-1"><a class="header-anchor" href="#configuring-csrf-protection-in-angular" aria-hidden="true">#</a> Configuring CSRF protection in Angular</h2><p>Angular <code>HttpClientModule</code> has a <strong>built-in CSRF protection</strong> enabled by default.</p><p>For a server that supports a cookie-based CSRF protection system, use <code>HttpClientXsrfModule</code> (in the import section of the module where your components are declared) to configure the XSRF protection (cookie name, header name, ...) or to disable it.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>imports<span class="token operator">:</span><span class="token punctuation">[</span>
HttpClientModule<span class="token punctuation">,</span>
HttpClientXsrfModule<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>By default, your application will <strong>automatically send the cookie</strong> <code>cookieName: &#39;XSRF-TOKEN&#39;</code>, and the header <code>headerName: &#39;X-XSRF-TOKEN&#39;</code> for each request sent from this component. If you want to customize the setting (to match server&#39;s cookie name for instance) :</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>imports<span class="token operator">:</span> <span class="token punctuation">[</span>
HttpClientModule<span class="token punctuation">,</span>
HttpClientXsrfModule<span class="token punctuation">.</span><span class="token function">withOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
cookieName<span class="token operator">:</span> <span class="token string">&#39;your-custom-Xsrf-Cookie&#39;</span><span class="token punctuation">,</span>
headerName<span class="token operator">:</span> <span class="token string">&#39;your-custom-Xsrf-Header&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>The CSRF module implements the default interceptor HttpXsrfInterceptor.</p><h2 id="further-resources" tabindex="-1"><a class="header-anchor" href="#further-resources" aria-hidden="true">#</a> Further resources</h2>`,16),h={href:"https://owasp.org/www-community/attacks/csrf",target:"_blank",rel:"noopener noreferrer"},m=t("owasp.org/www-community/attacks/csrf"),k={href:"https://angular.io/guide/http#security-xsrf-protection",target:"_blank",rel:"noopener noreferrer"},g=t("angular.io/guide/http#security-xsrf-protection");function f(b,v){const n=s("ExternalLinkIcon");return o(),r(i,null,[d,e("p",null,[e("a",h,[m,a(n)]),e("a",k,[g,a(n)])])],64)}var w=p(u,[["render",f]]);export{w as default};
