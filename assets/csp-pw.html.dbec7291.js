import{r as e,o,c,a as n,e as p,F as l,d as a,b as s}from"./app.f04538c2.js";import{_ as r}from"./pw-coding.b255a857.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},k=a('<h1 id="_4-4-csp-practical-work" tabindex="-1"><a class="header-anchor" href="#_4-4-csp-practical-work" aria-hidden="true">#</a> 4.4 CSP Practical Work</h1><h2 id="part-1" tabindex="-1"><a class="header-anchor" href="#part-1" aria-hidden="true">#</a> Part 1</h2><p><img src="'+r+'" alt="pw"></p><p>Practical Work Web-Application directory : <strong>pw/pw-csp</strong></p><p>1 - Starter Content Security Policy</p>',5),b=a('<li><p>Configure a minimalistic CSP in angular side (<code>index.html</code>) with the following value and observe the result (see console log) : <code>default-src &#39;none&#39;; script-src &#39;self&#39;; connect-src &#39;self&#39;; img-src &#39;self&#39;; style-src &#39;self&#39;;</code></p><ul><li>Hints : <ul><li>This policy allows images, scripts, AJAX, and CSS from the same origin, and does not allow any other resources to load (eg inline scripting, inline styles, object, frame, media, etc). It is a good starting point but often too restrictive for many existing sites</li><li>You can declare your CSP as a meta tag with <code>http-equiv</code> directive in <code>index.html</code> :<code>&lt;meta http-equiv=&quot;__directive__&quot; content=&quot;__value__&quot;&gt;</code></li></ul></li></ul></li><li><p>Update step by step the configuration in order to make the website load properly (Content-Security-Policy-Report-Only header)</p><ul><li>Hint : <span style="color:white;background-color:white;"> add unsafe-inline or unsafe-eval wherever needed to remove console alerts </span></li></ul></li>',2),m=s("Check the security level of this CSP on "),d={href:"https://csp-evaluator.withgoogle.com/",target:"_blank",rel:"noopener noreferrer"},g=s("csp-evaluator.withgoogle.com/"),h=a("<li><p>Declare the CSP server-side</p><ul><li>Hints : <ul><li>Use the spring security API HttpSecurity : <code>HttpSecurity#headers()#contentSecurityPolicy(&quot;...&quot;</code>)</li><li>Set the CSP configuration in <code>/server/src/main/java/com/worldline/bookstore/config/SecurityConfiguration.java</code></li><li>(if necessary) Bypass the angular-cli proxy in order to use the server-side CSP configuration (<code>ng build</code>, then use <code>http://localhost:8080/#/home</code>)</li></ul></li></ul></li>",1),y=n("p",null,"2 - Configure a CSP 3",-1),f=n("p",null,"Use CSP to secure your app against inline scripting",-1),w=n("li",null,[n("p",null,[s("In "),n("code",null,"index.html"),s(", declare an arbitrary inline scripting : "),n("code",null,`<script>document.write('<h1>Inline scripting is <b>not recommended</b>! But if you have not the choice, <b>secure your app with CSP</b></h1>');<\/script>"`)])],-1),q=n("li",null,[n("p",null,"Update the CSP in order to block the inline scripting.")],-1),S=n("li",null,[n("p",null,"Update the CSP in order to allow this inline scripting securely (consider CSP3 SHA-256 hash syntax)")],-1),v=s("Hints : To generate the hash of the script content, use this online tool : "),C={href:"https://report-uri.io/home/hash",target:"_blank",rel:"noopener noreferrer"},_=s("report-uri.io/home/hash"),P=s(" (beware of spaces and carriage returns...)"),R=s("Check the security level of this CSP on "),x={href:"https://csp-evaluator.withgoogle.com/",target:"_blank",rel:"noopener noreferrer"},H=s("csp-evaluator.withgoogle.com/"),E=a(`<h2 id="part-2" tabindex="-1"><a class="header-anchor" href="#part-2" aria-hidden="true">#</a> Part 2</h2><p>Practical Work Web-Application directory : <strong>pw/pw-csp-nonce</strong></p><p>The purpose of this PW is to implement a CSP based on a dynamic nonce. The CSP will be generated server-side but loaded client-side. Then we will add inline scripting and secure it with a nonce.</p><p>1 - Implement a CSP based on a nonce, server-side:</p><ul><li>Implement a CSPResource REST api endpoint to generate a random nonce and return a content-security-policy which declares this nonce in the <code>script-src</code> directive</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>            <span class="token keyword">package</span> com<span class="token punctuation">.</span>worldline<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>web<span class="token punctuation">.</span>rest<span class="token punctuation">;</span>

            <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span>
            <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span>
            <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>SecureRandom<span class="token punctuation">;</span>
            <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span>
            
            <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
            
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ResponseEntity<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Hex<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
            <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
            
            <span class="token keyword">import</span> com<span class="token punctuation">.</span>codahale<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Timed<span class="token punctuation">;</span>
            
            <span class="token doc-comment comment">/**
             * REST controller for managing Content-Security-Policy confuguration with random nonce.
             */</span>
            <span class="token decorator"><span class="token at operator">@</span><span class="token function">RestController</span></span>
            <span class="token decorator"><span class="token at operator">@</span><span class="token function">RequestMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CSPResource</span> <span class="token punctuation">{</span>
            
            	<span class="token keyword">private</span> final Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CSPResource<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>
            	
            	<span class="token doc-comment comment">/** Used for Script Nonce */</span>
            	<span class="token keyword">private</span> SecureRandom prng <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            
            	<span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/csp&quot;</span><span class="token punctuation">)</span>
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">Timed</span></span>
                <span class="token comment">// Add Script Nonce CSP Policy</span>
                <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">generateCSP</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              		<span class="token comment">// --Get its digest</span>
              		MessageDigest sha<span class="token punctuation">;</span>
              		<span class="token comment">// --Generate a random number</span>
              		String randomNum<span class="token punctuation">;</span>
              		<span class="token keyword">try</span> <span class="token punctuation">{</span>
              			<span class="token keyword">this</span><span class="token punctuation">.</span>prng <span class="token operator">=</span> SecureRandom<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA1PRNG&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              			randomNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prng<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              			sha <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              		<span class="token punctuation">}</span>
              		<span class="token keyword">catch</span> <span class="token punctuation">(</span>NoSuchAlgorithmException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;CSPException&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              		<span class="token punctuation">}</span>
              		
              		byte<span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> sha<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              		
              		<span class="token comment">// --Encode it into HEXA</span>
              		char<span class="token punctuation">[</span><span class="token punctuation">]</span> scriptNonce <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">;</span>
              
              		String csp <span class="token operator">=</span> <span class="token string">&quot;script-src&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;unsafe-eval&#39; &#39;strict-dynamic&#39; &quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;nonce-&quot;</span><span class="token operator">+</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>scriptNonce<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&#39;&quot;</span> <span class="token operator">+</span> <span class="token comment">// SRI hashes for https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js (work only for Chrome)</span>
              				<span class="token string">&quot;;&quot;</span> <span class="token operator">+</span>
              				<span class="token comment">// add connect-src directive to adapt CSP over cross-origin requests (CORS)  </span>
              				<span class="token string">&quot;connect-src&quot;</span><span class="token operator">+</span>
              				<span class="token string">&quot; http://localhost:8080 http://localhost:4200 ws://localhost:4200&quot;</span>
              				<span class="token operator">+</span> <span class="token string">&quot;;&quot;</span><span class="token operator">+</span>
              				<span class="token string">&quot; style-src&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;self&#39; &#39;unsafe-inline&#39;&quot;</span><span class="token operator">+</span>
              				<span class="token string">&quot;;&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; font-src&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;self&#39; &quot;</span><span class="token operator">+</span>
              				<span class="token string">&quot;;&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; img-src&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;self&#39; data:&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot;;&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; child-src&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;self&#39; &quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot;;&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; object-src&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; &#39;none&#39; &quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot;;&quot;</span> <span class="token operator">+</span>
              				<span class="token string">&quot; default-src&quot;</span> <span class="token operator">+</span>
              		    <span class="token string">&quot; &#39;self&#39; &quot;</span><span class="token punctuation">;</span>
              		
                      <span class="token constant">CSP</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">CSP</span></span><span class="token punctuation">(</span>csp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      conf<span class="token punctuation">.</span><span class="token function">setNonce</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>scriptNonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      
                      log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      
                      <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>
            
            <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div><p>Note : Implement a CSP wrapper class (used by the CSPResource class) with 2 attributes :</p><ul><li><p><code>config</code> : stores the complete <code>Content-Security-Policy</code></p></li><li><p><code>nonce</code> : stores the nonce</p></li><li><p>Remove the csp configuration loaded from the <code>SecurityConfiguration.java</code> if any</p></li></ul><p>2 - Client-side implementation:</p><ul><li>Create a services/cspConfigService.ts file to GET the CSP config and nonce from the CSPResources REST api</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>                <span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> Injector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClient<span class="token punctuation">,</span> HttpResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/common/http&#39;</span><span class="token punctuation">;</span>
                
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// Thuis service gets the Content-Security-Policy and a random nonce from a REST api endpoint /api/csp</span>
                <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CspConfig</span> <span class="token punctuation">{</span>
                
                    <span class="token keyword">private</span> _config<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
                    <span class="token keyword">private</span> _nonce<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
                    <span class="token keyword">private</span> http<span class="token operator">:</span> HttpClient<span class="token punctuation">;</span>
                  
                    <span class="token comment">// can&#39;t use classical Angular DI for HttpClient here, because of &quot;cyclic dependency&quot; issues</span>
                    <span class="token comment">// Use Injector service to instanciate HttpClient </span>
                  	<span class="token function">constructor</span><span class="token punctuation">(</span>injector<span class="token operator">:</span>Injector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    	<span class="token keyword">this</span><span class="token punctuation">.</span>http <span class="token operator">=</span> injector<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  	<span class="token punctuation">}</span>
                
                    <span class="token comment">// Load Content-Security-Policy from a REST api endpoint</span>
                    <span class="token comment">// The returned data will contain the CSP configuration (&#39;value&#39;) and the a random generated nonce (&#39;nonce&#39;)</span>
                    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/csp&#39;</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">toPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                  <span class="token keyword">this</span><span class="token punctuation">.</span>_config <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                                  <span class="token keyword">this</span><span class="token punctuation">.</span>_nonce <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;nonce&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                                  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
                               <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    
                    <span class="token keyword">get</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_config<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                
                    <span class="token keyword">get</span> <span class="token function">nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_nonce<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>Note : you will have to import and declare this new service in <code>app.module.ts</code></p><ul><li>Load the CSP with a meta tag and add an arbitrary <code>script</code> block with a nonce</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>        Update app<span class="token punctuation">.</span>component<span class="token punctuation">.</span>ts to add the following implementation
        
          <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
          	
          	<span class="token keyword">private</span> csp<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
          	<span class="token keyword">private</span> nonce<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> 
          	
          	<span class="token function">constructor</span><span class="token punctuation">(</span>
          		<span class="token keyword">private</span> router<span class="token operator">:</span> Router<span class="token punctuation">,</span> 
          		<span class="token keyword">public</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">,</span>
          		<span class="token keyword">public</span> cspConfig<span class="token operator">:</span> CspConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          
          	  	cspConfig<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
          	  		data <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          	  			
          	  			<span class="token keyword">this</span><span class="token punctuation">.</span>csp <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          	  			<span class="token keyword">this</span><span class="token punctuation">.</span>nonce <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;nonce&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
          	  			
          	  			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;csp : &#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>csp<span class="token punctuation">)</span><span class="token punctuation">;</span>
          	  			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;nonce : &#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>
          				
          				  <span class="token comment">// can&#39;t use the Meta#addTags() method to set CSP because it will insert the meta tag too late, so we add it &quot;manually&quot;</span>
          	  			<span class="token keyword">var</span> meta <span class="token operator">=</span> <span class="token string">&quot;&lt;meta http-equiv=\\&quot;Content-Security-Policy\\&quot; content=\\&quot;&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>csp<span class="token operator">+</span><span class="token string">&quot;\\&quot;&gt;&quot;</span><span class="token punctuation">;</span>
          	  			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderHtml</span><span class="token punctuation">(</span>meta<span class="token punctuation">,</span> <span class="token string">&#39;head&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          	  			<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;content-security-policy meta  : &#39;</span><span class="token operator">+</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    
                    <span class="token comment">// Add secure inline scripting (a script block with a nonce)</span>
          	  		  <span class="token comment">// The script will just render a message at the bottom of the page</span>
          				  <span class="token comment">// (here, we don&#39;t use document.write method otherwise it will replace the whole page rendering)</span>
          				  <span class="token keyword">var</span> yourHtmlString <span class="token operator">=</span> 
          					<span class="token string">&quot;&lt;script nonce=&#39;&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonce<span class="token operator">+</span><span class="token string">&quot;&#39;&gt;&quot;</span><span class="token operator">+</span>
          						<span class="token string">&quot;document.getElementsByTagName(&#39;body&#39;)[0].appendChild(&quot;</span><span class="token operator">+</span>
          							<span class="token string">&quot;document.createRange().createContextualFragment(&quot;</span><span class="token operator">+</span>
          								<span class="token string">&quot;&#39;&lt;h1&gt;Inline scripting is &lt;b&gt;not recommended&lt;/b&gt;! But if you have not the choice, &lt;b&gt;secure your app with CSP&lt;/b&gt;&lt;/h1&gt;&#39;));&lt;/script&gt;&quot;</span><span class="token punctuation">;</span>
          			 	  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderHtml</span><span class="token punctuation">(</span>yourHtmlString<span class="token punctuation">,</span> <span class="token string">&#39;head&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          				  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;inline scripting !!! &#39;</span><span class="token punctuation">,</span> yourHtmlString<span class="token punctuation">)</span><span class="token punctuation">;</span>				    
          	  	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          	<span class="token punctuation">}</span>
          
            <span class="token operator">...</span>
            
            <span class="token doc-comment comment">/**
          	 *	
          	 *	Renders an html portion inside a given html tag
          	 *	<span class="token keyword">@param</span> <span class="token parameter">message</span>: a string which represents the html portion to render in the page
          	 *	<span class="token keyword">@param</span> <span class="token parameter">parentTag</span> : the html tag name in which the html portion will be inserted as a first child
          	 */</span>
            <span class="token keyword">private</span> <span class="token function">renderHtml</span><span class="token punctuation">(</span>message<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> parentTag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          		<span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createContextualFragment</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
          		document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>parentTag<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><ul><li>Test your app from <code>http://localhost:4200</code> : the script should be executed without error message Check that your DOM contains the <code>Content-Security-Policy</code> meta tag with the nonce and that the inline scripting uses this nonce.</li></ul><p>Hint: Get <code>http://localhost:4200</code> and see the bottom of the &quot;home&quot; page. Normally a message is displayed. Check the browser&#39;s console. No error message. If you modify the nonce or remove it from <code>script</code> block (see <code>app.component.ts</code>), the script is not executed, and the message is no more displayed. An error appears in the console.</p><p>Note : <code>strict-dynamic</code> source expression specifies that the trust is explicitly given to a script present in the markup, by accompanying it with a nonce or a hash, shall be propagated to all the scripts loaded by that root script. At the same time, any whitelist or source expressions such as <code>self</code> or <code>unsafe-inline</code> will be ignored.</p>`,17);function N(T,j){const t=e("ExternalLinkIcon");return o(),c(l,null,[k,n("ul",null,[b,n("li",null,[n("p",null,[m,n("a",d,[g,p(t)])])]),h]),y,n("ul",null,[n("li",null,[f,n("ul",null,[w,q,S,n("li",null,[n("p",null,[v,n("a",C,[_,p(t)]),P])])])]),n("li",null,[n("p",null,[R,n("a",x,[H,p(t)])])])]),E],64)}var M=i(u,[["render",N]]);export{M as default};
